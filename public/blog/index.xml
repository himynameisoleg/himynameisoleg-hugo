<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on himynameisoleg</title>
    <link>https://himynameisoleg.com/blog/</link>
    <description>Recent content in Blog Posts on himynameisoleg</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://himynameisoleg.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Ultralearning Approach to the Technical Interview</title>
      <link>https://himynameisoleg.com/blog/02-an-ultralearning-approach-to-the-technical-interview/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/02-an-ultralearning-approach-to-the-technical-interview/</guid>
      <description>Intro In 2023 I interviewed with Amazon and Google. Both were eye opening experiences and exposed me to the rigor and extreme caution that big tech companies take with their hiring process. Their philosophy, as Iâ€™ve come to understand, is that passing on a few good candidates is better than hiring one bad egg. This poses an especially big challenge for us humble interviewees because we need to be extremely prepared, knowledgeable and level-headed come interview time.</description>
    </item>
    <item>
      <title>Replatforming from Gatsby to Zola!</title>
      <link>https://himynameisoleg.com/blog/03-replatforming-personal-website/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/03-replatforming-personal-website/</guid>
      <description>Intro So I&amp;rsquo;ve had my fair share of personal websites and blogs. I have built them on stacks ranging from the most basic HTML and CSS, to hosted frameworks like Wordpress and Laravel, to the more modern single page applications built in Vue and React. For a simple content blog I think you can&amp;rsquo;t go wrong with a Static Site Generator though. These days I am almost exclusively writing everything in Obsidian.</description>
    </item>
    <item>
      <title>Rust Development Environment with AstroNvim and rust-analyzer</title>
      <link>https://himynameisoleg.com/blog/rust-dev-env-astrovim/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/rust-dev-env-astrovim/</guid>
      <description>As a budding Rust programmer, I recently found myself wanting to set up a local development environment that would allow me to easily write and test code. After doing some research, I decided to give AstroNvim a try.&#xA;AstroNvim is an open-source configuration for the Neovim text editor that provides a number of helpful features for development including syntax highlighting, code completion, and error highlighting. It&amp;rsquo;s designed to be easy to install and use, which makes it a great choice for anyone wanting to hit the ground running with a feature rich vim-based environment.</description>
    </item>
    <item>
      <title>JavaScript Closures</title>
      <link>https://himynameisoleg.com/blog/javascript-closures/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/javascript-closures/</guid>
      <description>A Closure in JavaScript gives you access to an outer funtion&amp;rsquo;s scope from an inner function. This is useful for a number of things, but first lets take a look at how we declare a local variable.&#xA;For example:&#xA;function getDinner() { var dinner = &amp;#34;steak&amp;#34;; function whatsForDinner() { console.log(dinner); } return whatsForDinner(); } var todaysDinner = getDinner(); todaysDinner(); // steak Notice how the inner function whatsForDinner was able to access dinner directly without having to pass it in as a parameter.</description>
    </item>
    <item>
      <title>Using data-* Custom Attributes for style agnostic UI tests in Vue.js</title>
      <link>https://himynameisoleg.com/blog/using-data--custom-attributes-for-style-agnostic-unit-tests/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/using-data--custom-attributes-for-style-agnostic-unit-tests/</guid>
      <description>We can use a &amp;ldquo;data-*&amp;rdquo; attribute in our html to make accessing DOM elements for our unit tests more easily. Grabbing elements based on id, class, or html symantics is completely viable, but it may also lead ot some unexpected unit test failures due to simple UI changes &amp;ndash; say the removal or renaming of a class. Thus using a custom data attribute allows us to still access the elements, but avoids the potential failure of a functional unit test when a style changes.</description>
    </item>
    <item>
      <title>Remove duplicates from an Array of Objects based on property</title>
      <link>https://himynameisoleg.com/blog/remove-object-based-on-key/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/remove-object-based-on-key/</guid>
      <description>Here is a useful code snippet that allows you to pass in an array of objects, and then filter out the objects that have duplicate key values. Imagine you have a list of articles that you have merged from multiple sources and want to remove the duplicates based on id.&#xA;const articlesList = [ { id: 3, title: &amp;#34;Interesting Stuff&amp;#34;, content: &amp;#34;...&amp;#34; }, { id: 45, title: &amp;#34;Even more interesting&amp;#34;, content: &amp;#34;.</description>
    </item>
    <item>
      <title>Understanding const vs let</title>
      <link>https://himynameisoleg.com/blog/const-vs-let/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/const-vs-let/</guid>
      <description>In JavaScript, const and let are both ways to declare variables, but they have some important differences.&#xA;const stands for &amp;ldquo;constant.&amp;rdquo; When you declare a variable using const, you are telling the compiler that the value of the variable cannot be reassigned. For example:&#xA;const pi = 3.14; pi = 3.14159; // This would cause an error On the other hand, let allows you to declare a variable whose value can be reassigned.</description>
    </item>
    <item>
      <title>Array Reduce Function</title>
      <link>https://himynameisoleg.com/blog/array-reduce/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/array-reduce/</guid>
      <description>A higher-order function is a function that takes one or more functions as arguments, or returns a function as its result. Higher-order functions are an important concept in functional programming, as they allow you to abstract over actions rather than just values.&#xA;One common example of a higher-order function in JavaScript is the Array.prototype.reduce() function. This function takes an array and reduces it to a single value by applying a given function to each element in the array, starting from the left.</description>
    </item>
    <item>
      <title>Free Up Disk Space, delete node_modules</title>
      <link>https://himynameisoleg.com/blog/delete-node-modules/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://himynameisoleg.com/blog/delete-node-modules/</guid>
      <description>Here is a simple little script that checks a directory for node module and prints the total damage done:&#xA;cd directory_to_check find . -name &amp;#34;node_modules&amp;#34; -type d -prune | xargs du -chs To remove them use:&#xA;find . -name &amp;#34;node_modules&amp;#34; -type d -prune -exec rm -rf &amp;#39;{}&amp;#39; + </description>
    </item>
  </channel>
</rss>
